% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/schemes.R
\name{set_and_reps_schemes}
\alias{set_and_reps_schemes}
\alias{scheme_generic}
\alias{scheme_wave}
\title{Set and Rep Schemes}
\usage{
scheme_generic(
  reps = c(5, 5, 5),
  adjustment = c(0, 0, 0),
  vertical_planning = vertical_linear,
  vertical_planning_control = list(),
  progression_table = RIR_increment,
  progression_table_control = list()
)

scheme_wave(
  reps = c(10, 8, 6, 10, 8, 6),
  adjustment = c(4, 2, 0, 6, 4, 2),
  vertical_planning = vertical_linear,
  vertical_planning_control = list(),
  progression_table = RIR_increment,
  progression_table_control = list()
)
}
\arguments{
\item{reps}{Numeric vector indicating reps prescription}

\item{adjustment}{Numeric vector indicating adjustments. Forwarded to \code{progression_table}.
If the \code{progression_table} is \code{\link{RIR_increment}}, \code{adjustment} will be done
using RIR. On the other hand, if \code{\link{perc_drop}} is used, \code{adjustment} will be done
using 1RM percentage}

\item{vertical_planning}{Vertical planning function. Default is \code{\link{vertical_linear}}}

\item{vertical_planning_control}{Arguments forwarded to the \code{vertical_planning} function}

\item{progression_table}{Progression table function. Default is \code{\link{RIR_increment}}}

\item{progression_table_control}{Arguments forwarded to the \code{progression_table} function}
}
\value{
Data frame with the following columns: \code{reps}, \code{index}, \code{step},
\code{adjustment}, and \code{perc_1RM}.
}
\description{
Set and Rep Schemes
}
\section{Functions}{
\itemize{
\item \code{scheme_generic}: Generic set and rep scheme.
\code{scheme_generic} is called in all other set and rep schemes - only the default parameters
differ to make easier and quicker schemes writing and groupings

\item \code{scheme_wave}: Wave set and rep scheme
}}

\examples{
scheme_generic()

# Wave set and rep schemes
--------------------------
scheme_wave()

scheme_wave(
  reps = c(8, 6, 4, 8, 6, 4),
  vertical_planning = vertical_block,
  progression_table = perc_drop,
  progression_table_control = list(type = "ballistic"))

# Adjusted second wave
# and using 3 steps progression
scheme_wave(
  reps = c(8, 6, 4, 8, 6, 4),
  # Adjusting using lower \%1RM (perc_drop method used)
  adjustment = c(0, 0, 0, -0.1, -0.1, -0.1),
  vertical_planning = vertical_linear,
  vertical_planning_control = list(reps_change = c(0, -2, -4)),
  progression_table = perc_drop,
  progression_table_control = list(volume = "extensive"))

# Adjusted using RIR inc
# This time we adjust first wave as well, first two sets easier
scheme_wave(
  reps = c(8, 6, 4, 8, 6, 4),
  # Adjusting using lower \%1RM (perc_drop method used)
  adjustment = c(4, 2, 0, 6, 4, 2),
  vertical_planning = vertical_linear,
  vertical_planning_control = list(reps_change = c(0, -2, -4)),
  progression_table = RIR_increment,
  progression_table_control = list(volume = "extensive"))
}
